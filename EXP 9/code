#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    char s[20];
    char flag[20] = "//Constant";
    char result, operator;
    double interrslt;
    int flag2 = 0;
    FILE *fp1, *fp2;

    // Open input file for reading
    fp1 = fopen("input.txt", "r");
    if (fp1 == NULL) {
        perror("Error opening input file");
        return 1;
    }

    // Open output file for writing
    fp2 = fopen("output.txt", "w");
    if (fp2 == NULL) {
        perror("Error opening output file");
        fclose(fp1);
        return 1;
    }

    // Read each line from input file
    while (fscanf(fp1, "%s", s) != EOF) {
        if (strcmp(s, flag) == 0) {
            flag2 = 1;
            continue;
        }

        if (flag2 == 1) {
            result = s[0];
            operator = s[1];

            // Check if operands are digits and apply constant folding optimization
            if (isdigit(s[2]) && isdigit(s[4])) {
                switch (operator) {
                    case '+':
                        interrslt = (s[2] - '0') + (s[4] - '0');
                        break;
                    case '-':
                        interrslt = (s[2] - '0') - (s[4] - '0');
                        break;
                    case '*':
                        interrslt = (s[2] - '0') * (s[4] - '0');
                        break;
                    case '/':
                        interrslt = (double)(s[2] - '0') / (s[4] - '0');
                        break;
                    default:
                        interrslt = 0;
                        break;
                }

                // Write optimized result to output file
                fprintf(fp2, "/* Constant Folding */\n");
                fprintf(fp2, "%c = %.2lf\n", result, interrslt);
                flag2 = 0; // Reset flag for optimization
            } else {
                // If operands are not digits, write original expression to output file
                fprintf(fp2, "Not Optimized\n");
                fprintf(fp2, "%s\n", s);
            }
        } else {
            // If flag is not set, write original expression to output file
            fprintf(fp2, "%s\n", s);
        }
    }

    // Close input and output files
    fclose(fp1);
    fclose(fp2);

    return 0; // Exit with success status
}
