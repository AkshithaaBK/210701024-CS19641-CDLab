#include<stdio.h>
#include<string.h>

struct Production {
    char left;
    char right[20];
};

int main() {
    struct Production original[10], optimized[10];
    int n, z = 0;
    char *p;

    printf("Enter the number of productions: ");
    scanf("%d", &n);

    // Input original productions
    for (int i = 0; i < n; i++) {
        printf("Left: ");
        scanf(" %c", &original[i].left); // Space before %c to consume newline
        printf("Right: ");
        scanf("%s", original[i].right);
    }

    // Print original productions
    printf("\nOriginal Productions:\n");
    for (int i = 0; i < n; i++) {
        printf("%c=%s\n", original[i].left, original[i].right);
    }

    // Eliminate dead code
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (strchr(original[j].right, original[i].left)) {
                optimized[z++] = original[i];
                break;
            }
        }
    }

    // Print optimized productions after dead code elimination
    printf("\nAfter Dead Code Elimination:\n");
    for (int i = 0; i < z; i++) {
        printf("%c=%s\n", optimized[i].left, optimized[i].right);
    }

    // Eliminate common subexpressions
    for (int i = 0; i < z; i++) {
        char *tem = optimized[i].right;
        for (int j = i + 1; j < z; j++) {
            p = strstr(tem, optimized[j].right);
            if (p) {
                optimized[j].left = optimized[i].left;
            }
        }
    }

    // Print optimized productions after subexpression elimination
    printf("\nAfter Subexpression Elimination:\n");
    for (int i = 0; i < z; i++) {
        printf("%c=%s\n", optimized[i].left, optimized[i].right);
    }

    return 0;
}
