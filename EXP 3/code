%{
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function prototypes
void checkToken(const char *token);

%}

/* Definitions of regular expressions for tokens */
DIGIT   [0-9]
LETTER  [a-zA-Z]
ID      {LETTER}({LETTER}|{DIGIT})*
NUMBER  {DIGIT}+(\.{DIGIT}+)?
OPERATOR [+\-*/=<>!]+
SYMBOL  [(){}\[\];,]

%%

{ID}         { checkToken(yytext); }
{NUMBER}     { printf("Number: %s\n", yytext); }
{OPERATOR}   { printf("Operator: %s\n", yytext); }
{SYMBOL}     { printf("Symbol: %s\n", yytext); }
[ \t\n]+     ;  // Ignore whitespace
.            { printf("Unknown character: %s\n", yytext); }

%%

const char *keywords[] = {
    "auto", "break", "case", "char", "const", "continue", "default", "do", 
    "double", "else", "enum", "extern", "float", "for", "goto", "if", 
    "int", "long", "register", "return", "short", "signed", "sizeof", "static", 
    "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"
};

const int num_keywords = 32;

// Function to check if a token is a keyword or identifier
void checkToken(const char *token) {
    for (int i = 0; i < num_keywords; i++) {
        if (strcmp(token, keywords[i]) == 0) {
            printf("Keyword: %s\n", token);
            return;
        }
    }
    printf("Identifier: %s\n", token);
}

// Main function
int main(int argc, char **argv) {
    yylex();  // Call the lexer
    return 0;
}

int yywrap() {
    return 1;  // Indicates the end of input
}
